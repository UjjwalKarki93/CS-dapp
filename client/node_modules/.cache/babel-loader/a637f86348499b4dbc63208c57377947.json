{"ast":null,"code":"import _slicedToArray from \"D:\\\\CS-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\CS-dapp\\\\client\\\\src\\\\components\\\\ShowRequest.js\";\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport TransactionRow from './TransactionRow';\nimport '../App.css';\n\nconst ShowRequest = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        current = _useState2[0],\n        setCurrent = _useState2[1]; //dummy state\n\n\n  const initialInfo = async () => {\n    let f = await props.contract.methods.getreqNo().call();\n    const info = await Promise.all(Array(parseInt(f)).fill().map((element, index) => {\n      return props.contract.methods.getRequeststatus(index).call();\n    }));\n    localStorage.setItem(\"info\", JSON.stringify(info));\n  };\n\n  useEffect(() => {\n    initialInfo();\n    handler();\n    console.log(\"use effect used as didmount\");\n  }, []);\n  useEffect(() => {\n    initialInfo();\n    handler();\n    console.log(\"useeffect used for update\");\n  }, [props.refresh, current]);\n\n  const handler = () => {\n    setTimeout(() => {\n      setCurrent(!current);\n    }, 1000);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"REQUEST TABLE\"), console.log(\"render:current\", current), React.createElement(TransactionRow, {\n    account: props.account,\n    contract: props.contract,\n    web3: props.web3,\n    current: setCurrent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n};\n\nexport default ShowRequest;","map":{"version":3,"sources":["D:/CS-dapp/client/src/components/ShowRequest.js"],"names":["React","useState","useEffect","useLayoutEffect","TransactionRow","ShowRequest","props","current","setCurrent","initialInfo","f","contract","methods","getreqNo","call","info","Promise","all","Array","parseInt","fill","map","element","index","getRequeststatus","localStorage","setItem","JSON","stringify","handler","console","log","refresh","setTimeout","account","web3"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,eAArC,QAA4D,OAA5D;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAO,YAAP;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA,oBACCL,QAAQ,CAAC,CAAD,CADT;AAAA;AAAA,QACtBM,OADsB;AAAA,QACbC,UADa,kBACa;;;AAE1C,QAAMC,WAAW,GAAG,YAAY;AAE9B,QAAIC,CAAC,GAAG,MAAMJ,KAAK,CAACK,QAAN,CAAeC,OAAf,CAAuBC,QAAvB,GAAkCC,IAAlC,EAAd;AACA,UAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBC,KAAK,CAACC,QAAQ,CAACT,CAAD,CAAT,CAAL,CAAmBU,IAAnB,GAA0BC,GAA1B,CAA8B,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAChD,aAAOjB,KAAK,CAACK,QAAN,CAAeC,OAAf,CAAuBY,gBAAvB,CAAwCD,KAAxC,EAA+CT,IAA/C,EAAP;AACD,KAFD,CADiB,CAAnB;AAKAW,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeb,IAAf,CAA7B;AAID,GAZD;;AAeAb,EAAAA,SAAS,CAAC,MAAM;AAEdO,IAAAA,WAAW;AACXoB,IAAAA,OAAO;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AAED,GANQ,EAMN,EANM,CAAT;AAQA7B,EAAAA,SAAS,CAAC,MAAM;AAEdO,IAAAA,WAAW;AACXoB,IAAAA,OAAO;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAED,GANQ,EAMN,CAACzB,KAAK,CAAC0B,OAAP,EAAgBzB,OAAhB,CANM,CAAT;;AASA,QAAMsB,OAAO,GAAG,MAAM;AACpBI,IAAAA,UAAU,CAAC,MAAM;AACfzB,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJD;;AAUA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGuB,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BxB,OAA9B,CAFH,EAGE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAED,KAAK,CAAC4B,OADjB;AAEE,IAAA,QAAQ,EAAE5B,KAAK,CAACK,QAFlB;AAGE,IAAA,IAAI,EAAEL,KAAK,CAAC6B,IAHd;AAIE,IAAA,OAAO,EAAE3B,UAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAYD,CAzDD;;AA0DA,eAAeH,WAAf","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from 'react'\nimport TransactionRow from './TransactionRow';\nimport '../App.css'\n\nconst ShowRequest = (props) => {\n  const [current, setCurrent] = useState(0) //dummy state\n\n  const initialInfo = async () => {\n\n    let f = await props.contract.methods.getreqNo().call()\n    const info = await Promise.all(\n      Array(parseInt(f)).fill().map((element, index) => {\n        return props.contract.methods.getRequeststatus(index).call();\n      })\n    )\n    localStorage.setItem(\"info\", JSON.stringify(info))\n\n\n\n  }\n\n\n  useEffect(() => {\n\n    initialInfo();\n    handler();\n    console.log(\"use effect used as didmount\")\n\n  }, [])\n\n  useEffect(() => {\n\n    initialInfo();\n    handler()\n    console.log(\"useeffect used for update\")\n\n  }, [props.refresh, current])\n\n\n  const handler = () => {\n    setTimeout(() => {\n      setCurrent(!current)\n    }, 1000)\n  }\n\n\n\n\n\n  return (\n    <div>\n      <h1>REQUEST TABLE</h1>\n      {console.log(\"render:current\", current)}\n      <TransactionRow\n        account={props.account}\n        contract={props.contract}\n        web3={props.web3}\n        current={setCurrent}\n      />\n    </div>\n  )\n}\nexport default ShowRequest"]},"metadata":{},"sourceType":"module"}